// definimos una funcion la cual notifica mediante slack a los desarrolladores involucrados en el proyecto
def sendSlackNotifcation(){
    def description_error=''
    def color='good';
    def status='*SUCCES*'
    def stageNameError=''
    // def CI_ERROR = ''

        if (currentBuild.result=='FAILURE') {
            description_error="*${CI_ERROR}*"
            color='danger'
            status='*FAILURE*'
        }

    buildSummary = "Job: ${env.JOB_NAME}\n Status: ${status}\n Error description: ${description_error} \nBuild Report :${env.BUILD_URL}console"
    slackSend (color : color, message: "${buildSummary}", channel: 'jenkinstestflower')
}

node {
    
    try{
        stage('Checkout') {
            // stageNameError="${STAGE_NAME}"
            checkout scm
        }
        stage('SonarQube Analysis') {
            // stageNameError="${STAGE_NAME}"
            //defino una variable para que obtener la ruta de sonarscanner que se installo
            //en global configuration, tool solo es un acronimo que se utiliza para
            //recuperar la ruta del valor dado(SonarQubeClient)
            // def scannerHome = tool 'SonarQubeClient';
            withSonarQubeEnv('sonarqubeserver') { // If you have configured more than one global server connection, you can specify its name
                // sh(script: 'mvn -f demo/pom.xml org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar') 
                /* sh(script: 'mvn -f demo/pom.xml clean install')
                sh(script: '${scannerHome}/bin/sonar-scanner')*/
            //Todos los comandos anteriores funcian, por esta ves usaremos este,
            //ya que no necesita del sonar-project.properties file para funcionar,
            //en el caso de ejecutar el comando anterior a este en ese caso si es necesario
                sh(script: 'mvn -f demo/pom.xml clean install sonar:sonar')
            }
        }
        stage("Quality Gate") {
            // stageNameError="${STAGE_NAME}"
            timeout(time: 1, unit: 'MINUTES') {
                waitForQualityGate(abortPipeline: true, webhookSecretId: 'web_Hook_Sonar_Secret')
            }
        }
        stage("Build Docker Image to Java project"){
            docker.withRegistry('https://index.docker.io/v1/','DockerHub-access-credentials'){
            def customImage = docker.build('miltonlq/billingfront:latest', '--no-cache --build-arg angularfiles=dist/billingApp -f Devops/images/frontend/Dockerfile ./')
            customImage.push()
            }
        }
        
    }catch (Exception e) {
        currentBuild.result = 'FAILURE'
        CI_ERROR = "Error en el paso ${STAGE_NAME} ${e.message}"
    }finally{
        sendSlackNotifcation()
    }
}


